<?xml version="1.0" encoding="UTF-8"?>
<pmd version="5.5.2" timestamp="2017-01-30T18:49:33.850">
<file name="/Users/mchinnappan/code-scan-tools/pmd/src/pmd-master/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/ApexParserOptions.java">
<violation beginline="16" endline="16" begincolumn="36" endcolumn="39" rule="UselessParentheses" ruleset="Unnecessary" package="net.sourceforge.pmd.lang.apex" class="ApexParserOptions" method="hashCode" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/unnecessary.html#UselessParentheses" priority="4">
Useless parentheses.
</violation>
<violation beginline="17" endline="17" begincolumn="36" endcolumn="39" rule="UselessParentheses" ruleset="Unnecessary" package="net.sourceforge.pmd.lang.apex" class="ApexParserOptions" method="hashCode" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/unnecessary.html#UselessParentheses" priority="4">
Useless parentheses.
</violation>
</file>
<file name="/Users/mchinnappan/code-scan-tools/pmd/src/pmd-master/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/ast/AbstractApexNode.java">
<violation beginline="123" endline="123" begincolumn="18" endcolumn="37" rule="AvoidCatchingNPE" ruleset="Strict Exceptions" package="net.sourceforge.pmd.lang.apex.ast" class="AbstractApexNode" method="hasRealLoc" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/strictexception.html#AvoidCatchingNPE" priority="3">
Avoid catching NullPointerException; consider removing the cause of the NPE.
</violation>
</file>
<file name="/Users/mchinnappan/code-scan-tools/pmd/src/pmd-master/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/ast/ApexParser.java">
<violation beginline="52" endline="52" begincolumn="13" endcolumn="79" rule="PrematureDeclaration" ruleset="Optimization" package="net.sourceforge.pmd.lang.apex.ast" class="ApexParser" method="parse" variable="treeBuilder" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/optimizations.html#PrematureDeclaration" priority="3">
Avoid declaring a variable if it is unreferenced before a possible exit point.
</violation>
</file>
<file name="/Users/mchinnappan/code-scan-tools/pmd/src/pmd-master/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/ast/ApexTreeBuilder.java">
<violation beginline="5" endline="641" begincolumn="1" endcolumn="3" rule="GodClass" ruleset="Design" package="net.sourceforge.pmd.lang.apex.ast" class="ApexTreeBuilder" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/design.html#GodClass" priority="3">
Possible God class (WMC=89, ATFD=165, TCC=0.0)
</violation>
</file>
<file name="/Users/mchinnappan/code-scan-tools/pmd/src/pmd-master/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/complexity/StdCyclomaticComplexityRule.java">
<violation beginline="153" endline="153" begincolumn="38" endcolumn="83" rule="UselessParentheses" ruleset="Unnecessary" package="net.sourceforge.pmd.lang.apex.rule.complexity" class="StdCyclomaticComplexityRule" method="visit" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/unnecessary.html#UselessParentheses" priority="4">
Useless parentheses.
</violation>
</file>
<file name="/Users/mchinnappan/code-scan-tools/pmd/src/pmd-master/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/security/ApexCRUDViolationRule.java">
<violation beginline="5" endline="528" begincolumn="1" endcolumn="2" rule="GodClass" ruleset="Design" package="net.sourceforge.pmd.lang.apex.rule.security" class="ApexCRUDViolationRule" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/design.html#GodClass" priority="3">
Possible God class (WMC=99, ATFD=80, TCC=0.017543859649122806)
</violation>
<violation beginline="57" endline="57" begincolumn="19" endcolumn="41" rule="LooseCoupling" ruleset="Coupling" package="net.sourceforge.pmd.lang.apex.rule.security" class="ApexCRUDViolationRule" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/coupling.html#LooseCoupling" priority="3">
Avoid using implementation types like 'HashMap'; use the interface instead
</violation>
<violation beginline="59" endline="59" begincolumn="19" endcolumn="41" rule="LooseCoupling" ruleset="Coupling" package="net.sourceforge.pmd.lang.apex.rule.security" class="ApexCRUDViolationRule" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/coupling.html#LooseCoupling" priority="3">
Avoid using implementation types like 'HashMap'; use the interface instead
</violation>
<violation beginline="213" endline="213" begincolumn="9" endcolumn="60" rule="PrematureDeclaration" ruleset="Optimization" package="net.sourceforge.pmd.lang.apex.rule.security" class="ApexCRUDViolationRule" method="collectCRUDMethodLevelChecks" variable="method" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/optimizations.html#PrematureDeclaration" priority="3">
Avoid declaring a variable if it is unreferenced before a possible exit point.
</violation>
<violation beginline="298" endline="298" begincolumn="14" endcolumn="79" rule="UselessParentheses" ruleset="Unnecessary" package="net.sourceforge.pmd.lang.apex.rule.security" class="ApexCRUDViolationRule" method="checkForCRUD" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/unnecessary.html#UselessParentheses" priority="4">
Useless parentheses.
</violation>
<violation beginline="299" endline="299" begincolumn="21" endcolumn="88" rule="UselessParentheses" ruleset="Unnecessary" package="net.sourceforge.pmd.lang.apex.rule.security" class="ApexCRUDViolationRule" method="checkForCRUD" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/unnecessary.html#UselessParentheses" priority="4">
Useless parentheses.
</violation>
<violation beginline="321" endline="321" begincolumn="13" endcolumn="44" rule="LooseCoupling" ruleset="Coupling" package="net.sourceforge.pmd.lang.apex.rule.security" class="ApexCRUDViolationRule" method="getPreviousMethodCalls" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/coupling.html#LooseCoupling" priority="3">
Avoid using implementation types like 'HashSet'; use the interface instead
</violation>
<violation beginline="341" endline="341" begincolumn="19" endcolumn="50" rule="LooseCoupling" ruleset="Coupling" package="net.sourceforge.pmd.lang.apex.rule.security" class="ApexCRUDViolationRule" method="recursivelyEvaluateCRUDMethodCalls" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/coupling.html#LooseCoupling" priority="3">
Avoid using implementation types like 'HashSet'; use the interface instead
</violation>
<violation beginline="355" endline="355" begincolumn="21" endcolumn="33" rule="CompareObjectsWithEquals" ruleset="Design" package="net.sourceforge.pmd.lang.apex.rule.security" class="ApexCRUDViolationRule" method="recursivelyEvaluateCRUDMethodCalls" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/design.html#CompareObjectsWithEquals" priority="3">
Use equals() to compare object references.
</violation>
<violation beginline="368" endline="368" begincolumn="19" endcolumn="50" rule="LooseCoupling" ruleset="Coupling" package="net.sourceforge.pmd.lang.apex.rule.security" class="ApexCRUDViolationRule" method="mapCallToMethodDecl" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/coupling.html#LooseCoupling" priority="3">
Avoid using implementation types like 'HashSet'; use the interface instead
</violation>
<violation beginline="370" endline="370" begincolumn="17" endcolumn="28" rule="CompareObjectsWithEquals" ruleset="Design" package="net.sourceforge.pmd.lang.apex.rule.security" class="ApexCRUDViolationRule" method="mapCallToMethodDecl" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/design.html#CompareObjectsWithEquals" priority="3">
Use equals() to compare object references.
</violation>
<violation beginline="385" endline="385" begincolumn="31" endcolumn="76" rule="UselessParentheses" ruleset="Unnecessary" package="net.sourceforge.pmd.lang.apex.rule.security" class="ApexCRUDViolationRule" method="findConstructorlMethods" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/unnecessary.html#UselessParentheses" priority="4">
Useless parentheses.
</violation>
<violation beginline="401" endline="401" begincolumn="82" endcolumn="101" rule="StringToString" ruleset="String and StringBuffer" package="net.sourceforge.pmd.lang.apex.rule.security" class="ApexCRUDViolationRule" method="isProperESAPICheckForDML" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/strings.html#StringToString" priority="3">
Avoid calling toString() on String objects; this is unnecessary.
</violation>
<violation beginline="464" endline="464" begincolumn="9" endcolumn="32" rule="PrematureDeclaration" ruleset="Optimization" package="net.sourceforge.pmd.lang.apex.rule.security" class="ApexCRUDViolationRule" method="checkForAccessibility" variable="isGetter" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/optimizations.html#PrematureDeclaration" priority="3">
Avoid declaring a variable if it is unreferenced before a possible exit point.
</violation>
<violation beginline="465" endline="465" begincolumn="9" endcolumn="32" rule="PrematureDeclaration" ruleset="Optimization" package="net.sourceforge.pmd.lang.apex.rule.security" class="ApexCRUDViolationRule" method="checkForAccessibility" variable="returnType" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/optimizations.html#PrematureDeclaration" priority="3">
Avoid declaring a variable if it is unreferenced before a possible exit point.
</violation>
<violation beginline="470" endline="470" begincolumn="14" endcolumn="79" rule="UselessParentheses" ruleset="Unnecessary" package="net.sourceforge.pmd.lang.apex.rule.security" class="ApexCRUDViolationRule" method="checkForAccessibility" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/unnecessary.html#UselessParentheses" priority="4">
Useless parentheses.
</violation>
<violation beginline="471" endline="471" begincolumn="21" endcolumn="88" rule="UselessParentheses" ruleset="Unnecessary" package="net.sourceforge.pmd.lang.apex.rule.security" class="ApexCRUDViolationRule" method="checkForAccessibility" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/unnecessary.html#UselessParentheses" priority="4">
Useless parentheses.
</violation>
<violation beginline="526" endline="526" begincolumn="17" endcolumn="46" rule="UselessParentheses" ruleset="Unnecessary" package="net.sourceforge.pmd.lang.apex.rule.security" class="ApexCRUDViolationRule" method="isMethodAGetter" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/unnecessary.html#UselessParentheses" priority="4">
Useless parentheses.
</violation>
</file>
<file name="/Users/mchinnappan/code-scan-tools/pmd/src/pmd-master/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/security/ApexDangerousMethodsRule.java">
<violation beginline="38" endline="38" begincolumn="19" endcolumn="33" rule="LooseCoupling" ruleset="Coupling" package="net.sourceforge.pmd.lang.apex.rule.security" class="ApexDangerousMethodsRule" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/coupling.html#LooseCoupling" priority="3">
Avoid using implementation types like 'HashSet'; use the interface instead
</violation>
</file>
<file name="/Users/mchinnappan/code-scan-tools/pmd/src/pmd-master/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/security/ApexSOQLInjectionRule.java">
<violation beginline="37" endline="37" begincolumn="19" endcolumn="33" rule="LooseCoupling" ruleset="Coupling" package="net.sourceforge.pmd.lang.apex.rule.security" class="ApexSOQLInjectionRule" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/coupling.html#LooseCoupling" priority="3">
Avoid using implementation types like 'HashSet'; use the interface instead
</violation>
<violation beginline="38" endline="38" begincolumn="19" endcolumn="42" rule="LooseCoupling" ruleset="Coupling" package="net.sourceforge.pmd.lang.apex.rule.security" class="ApexSOQLInjectionRule" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/coupling.html#LooseCoupling" priority="3">
Avoid using implementation types like 'HashMap'; use the interface instead
</violation>
</file>
<file name="/Users/mchinnappan/code-scan-tools/pmd/src/pmd-master/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/security/ApexSuggestUsingNamedCredRule.java">
<violation beginline="70" endline="70" begincolumn="13" endcolumn="44" rule="SimplifyConditional" ruleset="Design" package="net.sourceforge.pmd.lang.apex.rule.security" class="ApexSuggestUsingNamedCredRule" method="findFieldLiterals" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/design.html#SimplifyConditional" priority="3">
No need to check for null before an instanceof
</violation>
</file>
<file name="/Users/mchinnappan/code-scan-tools/pmd/src/pmd-master/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/security/Helper.java">
<violation beginline="42" endline="42" begincolumn="28" endcolumn="51" rule="AvoidProtectedFieldInFinalClass" ruleset="Design" package="net.sourceforge.pmd.lang.apex.rule.security" class="Helper" variable="ANY_METHOD" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/design.html#AvoidProtectedFieldInFinalClass" priority="3">
Avoid protected fields in a final class.  Change to private or package access.
</violation>
<violation beginline="57" endline="59" begincolumn="9" endcolumn="9" rule="SimplifyBooleanReturns" ruleset="Design" package="net.sourceforge.pmd.lang.apex.rule.security" class="Helper" method="isTestMethodOrClass" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/design.html#SimplifyBooleanReturns" priority="3">
Avoid unnecessary if..then..else statements when returning booleans
</violation>
<violation beginline="68" endline="70" begincolumn="9" endcolumn="9" rule="SimplifyBooleanReturns" ruleset="Design" package="net.sourceforge.pmd.lang.apex.rule.security" class="Helper" method="foundAnySOQLorSOSL" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/design.html#SimplifyBooleanReturns" priority="3">
Avoid unnecessary if..then..else statements when returning booleans
</violation>
<violation beginline="92" endline="95" begincolumn="9" endcolumn="9" rule="SimplifyBooleanReturns" ruleset="Design" package="net.sourceforge.pmd.lang.apex.rule.security" class="Helper" method="foundAnyDML" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/design.html#SimplifyBooleanReturns" priority="3">
Avoid unnecessary if..then..else statements when returning booleans
</violation>
</file>
<file name="/Users/mchinnappan/code-scan-tools/pmd/src/pmd-master/pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/rule/style/MethodNamingConventionsRule.java">
<violation beginline="48" endline="48" begincolumn="17" endcolumn="67" rule="UselessParentheses" ruleset="Unnecessary" package="net.sourceforge.pmd.lang.apex.rule.style" class="MethodNamingConventionsRule" method="isPropertyAccessor" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/unnecessary.html#UselessParentheses" priority="4">
Useless parentheses.
</violation>
<violation beginline="52" endline="52" begincolumn="17" endcolumn="28" rule="UnnecessaryParentheses" ruleset="Controversial" package="net.sourceforge.pmd.lang.apex.rule.style" class="MethodNamingConventionsRule" method="isConstructor" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/controversial.html#UnnecessaryParentheses" priority="3">
This statement may have some unnecessary parentheses
</violation>
<violation beginline="52" endline="52" begincolumn="17" endcolumn="62" rule="UselessParentheses" ruleset="Unnecessary" package="net.sourceforge.pmd.lang.apex.rule.style" class="MethodNamingConventionsRule" method="isConstructor" externalInfoUrl="https://pmd.github.io/pmd-5.5.2/pmd-java/rules/java/unnecessary.html#UselessParentheses" priority="4">
Useless parentheses.
</violation>
</file>
</pmd>
